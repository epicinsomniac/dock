version: '3.7'
services:

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
       proxy:
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    environment:
      - CF_API_EMAIL=$CF_API_EMAIL
      - CF_DNS_API_TOKEN=$CF_DNS_API_TOKEN
      - CF_API_KEY=$CF_API_KEY
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DSOCK:/var/run/docker.sock:ro
      - $DAPPS/traefik/traefik.yml:/traefik.yml:ro
      - $DAPPS/traefik/acme.json:/acme.json
      - $DAPPS/traefik/config.yml:/config.yml:ro
      - $DAPPS/traefik/logs:/var/log/traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.$DOMAIN_NAME`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=$TRAEFIKUSERPASS"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.$DOMAIN_NAME`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=$DOMAIN_NAME"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.$DOMAIN_NAME"
      - "traefik.http.routers.traefik-secure.service=api@internal"

  portainer:
    image: portainer/portainer-ce:latest
    volumes:
      - $DSOCK:/var/run/docker.sock
      - $DAPPS/portainer/data:/data
    container_name: portainer
    networks:
       proxy:
    ports:
      - '9000:9000'
      - '9443:9443'
    restart: always
    security_opt:
      - no-new-privileges:true
    labels:
      # Enable traefik
      - "traefik.enable=true"
      # basic auth if needed
      #- "traefik.http.middlewares.portainer-auth.basicauth.users=$TRAEFIKUSERPASS"
      #- "traefik.http.routers.portainer-secure.middlewares=portainer-auth"
      # entry point HTTP -> redirect to HTTPS
      - "traefik.http.routers.portainer.entrypoints=http"
      - "traefik.http.routers.portainer.rule=Host(`portainer.$DOMAIN_NAME`)"
      - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.portainer.middlewares=portainer-https-redirect"
      # entry point HTTPS -> forward to service
      - "traefik.http.routers.portainer-secure.entrypoints=https"
      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.$DOMAIN_NAME`)"
      - "traefik.http.routers.portainer-secure.tls=true"
      # resolver cloudflare - cloudflare or tls, not both
      - "traefik.http.routers.portainer-secure.tls.certresolver=cloudflare"
      # resolver tls - using tls, traefik ssl from cloudflare wildcard
      #- "traefik.http.routers.portainer-secure.tls.certresolver=tls"
      - "traefik.http.routers.portainer-secure.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.docker.network=proxy"

  whoami:
    image: "traefik/whoami"
    command:
      - --port=8086
    container_name: whoami
    networks:
       proxy:
    ports:
      - '8086:8086'
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.entrypoints=http"
      - "traefik.http.routers.whoami.rule=Host(`whoami.epicinsomniac.com`)"
      - "traefik.http.middlewares.whoami-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.whoami.middlewares=whoami-https-redirect"
      - "traefik.http.routers.whoami-secure.entrypoints=https"
      - "traefik.http.routers.whoami-secure.rule=Host(`whoami.epicinsomniac.com`)"
      - "traefik.http.routers.whoami-secure.tls=true"
      - "traefik.http.routers.whoami-secure.tls.certresolver=tls"
      - "traefik.http.routers.whoami-secure.service=whoami"
      - "traefik.http.services.whoami.loadbalancer.server.port=8086"
      - "traefik.docker.network=proxy"

  netdata:
    image: netdata/netdata
    container_name: netdata
    hostname: netdata.epicinsomniac.com # set to fqdn of host
    ports:
      - 19999:19999
    expose:
      - 19999
    restart: unless-stopped
    networks:
      - proxy
      - internal
#    pid: host
    environment:
      PGID: 998
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - $DAPPS/netdata/netdataconfig:/etc/netdata
      - $DAPPS/netdata/netdatalib:/var/lib/netdata
      - $DAPPS/netdata/netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - $DSOCK:/var/run/docker.sock:ro
    labels:
      # Enable traefik
      - "traefik.enable=true"
      # basic auth if needed
      #- "traefik.http.middlewares.netdata-auth.basicauth.users=USER-PASS"
      #- "traefik.http.routers.netdata-secure.middlewares=netdata-auth"
      # entry point HTTP -> redirect to HTTPS
      - "traefik.http.routers.netdata.entrypoints=http"
      - "traefik.http.routers.netdata.rule=Host(`netdata.epicinsomniac.com`)"
      - "traefik.http.middlewares.netdata-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.netdata.middlewares=netdata-https-redirect"
      # entry point HTTPS -> forward to service
      - "traefik.http.routers.netdata-secure.entrypoints=https"
      - "traefik.http.routers.netdata-secure.rule=Host(`netdata.epicinsomniac.com`)"
      - "traefik.http.routers.netdata-secure.tls=true"
      # resolver cloudflare - cloudflare or tls, not both
      - "traefik.http.routers.netdata-secure.tls.certresolver=cloudflare"
      # resolver tls
      #- "traefik.http.routers.netdata-secure.tls.certresolver=tls"
      - "traefik.http.routers.netdata-secure.service=netdata"
      - "traefik.http.services.netdata.loadbalancer.server.port=19999"
      - "traefik.docker.network=proxy"

networks:
  proxy:
    external: true
  internal:
    external: false

volumes:
  netdataconfig:
  netdatalib:
  netdatacache:
